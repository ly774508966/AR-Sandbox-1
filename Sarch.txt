How We are doing it?
CASLAB for compiling and testing our code
Compiling with a makefile so IDE doesnt matter
Using Github as a back up and for version control
Will use the HArdware Installation instructions outlined by UC Davis to set things up
Will use UC Davis Calibration Tool This is compiled through their makefile so we will need that
The idea of how the project works is we install VRUI & 3d kinect capture project to the project directory, setup the hardware, run the make command which compiles everything,
use the calibration tool to setup the connect, then just run the application in full screen mode.
WE are the ones righting the make and the application that will be run.
What is icpp? Because many build systems automatically compile any file ending in .cpp into an object file. And many programmers assume that a .cpp file will be compiled into an object file.


================================================================================

Calibration Tool - Provided by UC Davis

================================================================================

APPLICATION

Linux
C++
Compiled through make
See Header files for methods lists

FindBlobs (FUNCTION)
Description - Helper function to extract all eight-connected blobs of pixels from a frame that match an arbitrary property.
Includes -
    <vector>

FrameFilter (CLASS)
Description - Class to filter streams of depth frames arriving from a depth camera, with code to detect unstable values in each pixel, and fill holes resulting from invalid samples.
Includes -
    <Threads/Thread.h> <Threads/MutexCond.h> <Kinect/FrameBuffer.h> <Kinect/FrameSource.h> <Misc/FunctionCalls.h>
    <Geometry/HVector.h> <Geometry/Plane.h> <Geometry/Matrix.h> <Geometry/ProjectiveTransformation.h>

RainMaker (CLASS)
Description - Class to detect objects moving through a given range of depths in a depth image sequence to trigger rainfall on virtual terrain.
Includes -
    <vector> <Threads/Thread.h> <Threads/MutexCond.h> Geometry/Point.h>
    <Geometry/Matrix.h> <Geometry/ProjectiveTransformation.h> <Kinect/FrameBuffer.h>
    <Misc/FunctionCalls.h> <Geometry/HVector.h> <Geometry/Plane.h> "FindBlobs.h"

SurfaceRenderer (CLASS) extends GLObject
Description - Class to render a surface defined by a regular grid in depth image space.
Includes -
    <IO/FileMonitor.h> <Geometry/Plane.h> <Geometry/ProjectiveTransformation.h>
    <GL/gl.h> <GL/Extensions/GLARBShaderObjects.h> <GL/GLObject.h> <Kinect/FrameBuffer.h>
    #include <string>
    #include <vector>
    #include <iostream>
    #include <Misc/PrintInteger.h>
    #include <Misc/ThrowStdErr.h>
    #include <GL/gl.h>
    #include <GL/GLVertexArrayParts.h>
    #include <GL/Extensions/GLARBFragmentShader.h>
    #include <GL/Extensions/GLARBMultitexture.h>
    #include <GL/Extensions/GLARBShaderObjects.h>
    #include <GL/Extensions/GLARBTextureFloat.h>
    #include <GL/Extensions/GLARBTextureRectangle.h>
    #include <GL/Extensions/GLARBTextureRg.h>
    #include <GL/Extensions/GLARBVertexBufferObject.h>
    #include <GL/Extensions/GLARBVertexShader.h>
    #include <GL/Extensions/GLEXTFramebufferObject.h>
    #include <GL/GLLightTracker.h>
    #include <GL/GLContextData.h>
    #include <GL/GLGeometryVertex.h>
    #include "WaterTable2.h"

WaterTable2 (CLASS) extends GLObject
Description - Class to simulate water flowing over a surface using
improved water flow simulation based on Saint-Venant system of partial
differential equations.
Includes -
    #include <vector>
    #include <Misc/FunctionCalls.h>
    #include <Geometry/Point.h>
    #include <Geometry/Plane.h>
    #include <Geometry/Box.h>
    #include <Geometry/OrthonormalTransformation.h>
    #include <GL/gl.h>
    #include <GL/Extensions/GLARBShaderObjects.h>
    #include <GL/GLObject.h>
    #include <GL/GLContextData.h>
    #include <stdarg.h>
    #include <string>
    #include <iostream>
    #include <Misc/ThrowStdErr.h>
    #include <Math/Math.h>
    #include <Geometry/AffineCombiner.h>
    #include <Geometry/Vector.h>
    #include <GL/gl.h>
    #include <GL/Extensions/GLARBDrawBuffers.h>
    #include <GL/Extensions/GLARBFragmentShader.h>
    #include <GL/Extensions/GLARBMultitexture.h>
    #include <GL/Extensions/GLARBShaderObjects.h>
    #include <GL/Extensions/GLARBTextureFloat.h>
    #include <GL/Extensions/GLARBTextureRectangle.h>
    #include <GL/Extensions/GLARBTextureRg.h>
    #include <GL/Extensions/GLARBVertexShader.h>
    #include <GL/Extensions/GLEXTFramebufferObject.h>
    #include <GL/GLContextData.h>
    #include <GL/GLTransformationWrappers.h>
    #include "SurfaceRenderer.h"

Sandbox (Main) extends GLObject, Vrui::Application
Inner classes -
  	class WaterTool:public Vrui::Tool,public Vrui::Application::Tool<Sandbox>
    class LocalWaterTool:public Vrui::Tool,public Vrui::Application::Tool<Sandbox>,public Vrui::TransparentObject
Description - Vrui application to drive an augmented reality sandbox.

Includes -
    #include <Threads/TripleBuffer.h>
    #include <USB/Context.h>
    #include <Geometry/Box.h>
    #include <Geometry/ProjectiveTransformation.h>
    #include <GL/gl.h>
    #include <GL/GLColorMap.h>
    #include <GL/GLMaterial.h>
    #include <GL/GLObject.h>
    #include <GL/GLGeometryVertex.h>
    #include <GLMotif/ToggleButton.h>
    #include <GLMotif/TextFieldSlider.h>
    #include <Vrui/Tool.h>
    #include <Vrui/GenericToolFactory.h>
    #include <Vrui/TransparentObject.h>
    #include <Vrui/Application.h>
    #include <Kinect/FrameBuffer.h>
    #include <Kinect/FrameSource.h>

    #include "RainMaker.h"
    #include "Sandbox.h"

    #include <ctype.h>
    #include <string.h>
    #include <stdlib.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <unistd.h>
    #include <fcntl.h>
    #include <string>
    #include <vector>
    #include <stdexcept>
    #include <iostream>
    #include <Misc/SelfDestructPointer.h>
    #include <Misc/FunctionCalls.h>
    #include <Misc/FileNameExtensions.h>
    #include <IO/File.h>
    #include <IO/ValueSource.h>
    #include <Math/Math.h>
    #include <Math/Constants.h>
    #include <Geometry/Point.h>
    #include <Geometry/AffineCombiner.h>
    #include <Geometry/HVector.h>
    #include <Geometry/Plane.h>
    #include <Geometry/GeometryValueCoders.h>
    #include <Geometry/OutputOperators.h>
    #include <GL/gl.h>
    #include <GL/GLMaterialTemplates.h>
    #include <GL/GLPrintError.h>
    #include <GL/GLColorMap.h>
    #include <GL/GLLightTracker.h>
    #include <GL/Extensions/GLEXTFramebufferObject.h>
    #include <GL/Extensions/GLARBTextureRectangle.h>
    #include <GL/Extensions/GLARBTextureFloat.h>
    #include <GL/Extensions/GLARBTextureRg.h>
    #include <GL/Extensions/GLARBDepthTexture.h>
    #include <GL/Extensions/GLARBShaderObjects.h>
    #include <GL/Extensions/GLARBVertexShader.h>
    #include <GL/Extensions/GLARBFragmentShader.h>
    #include <GL/Extensions/GLARBMultitexture.h>
    #include <GL/GLContextData.h>
    #include <GL/GLGeometryWrappers.h>
    #include <GL/GLTransformationWrappers.h>
    #include <GLMotif/StyleSheet.h>
    #include <GLMotif/WidgetManager.h>
    #include <GLMotif/PopupMenu.h>
    #include <GLMotif/Menu.h>
    #include <GLMotif/PopupWindow.h>
    #include <GLMotif/Margin.h>
    #include <GLMotif/Label.h>
    #include <GLMotif/TextField.h>
    #include <Vrui/Vrui.h>
    #include <Vrui/Lightsource.h>
    #include <Vrui/LightsourceManager.h>
    #include <Vrui/Viewer.h>
    #include <Vrui/ToolManager.h>
    #include <Vrui/DisplayState.h>
    #include <Vrui/OpenFile.h>
    #include <Kinect/Camera.h>

    #define SAVEDEPTH 0

    #if SAVEDEPTH
    #include <Images/RGBImage.h>
    #include <Images/WriteImageFile.h>
    #endif

    #include "FrameFilter.h"
    #include "SurfaceRenderer.h"
    #include "WaterTable2.h"
